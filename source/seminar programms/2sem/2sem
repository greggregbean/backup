Редакторы. Пользователи и группы. Системные вызовы. Компиляция. Отладка

Команды подключения к удалённому контейнеру:
ssh user08@s82000.vdi.mipt.ru - в кампусе
ssh -p 55396 user08@remote.vdi.mipt.ru - вне кампуса

logout, exit - выход из контейнера

vimtutor - учебник по vim
vim имя_файла - создание или открытие в vim файла, попадание в основной режим



Режимы vim:
основной
режим ввода (для ввода текста)
визуальный (выделение текста)
командный (для выполнения команд)

i - переход в режим вставки
esc - переход в основной режим
v - визуальный режим
d - delete
y - copy
p - paste
dd - удаление строки
ctrl-r - отмена последней отмены
u - отмена последнего действия
: - переход в командный режим
:wq - выход из редактора с сохранением
:q! - выход из редактора без сохранения

uid (user identificator)
gid (group identificator)
whoami - вывод имени пользователя
groups - вывод имени групп, в которых задействован пользователь

chown(change owner) owner file1 [file2 ... fileN] - изменение собственника файлов
owner - username or identificator
chgrp(change group) group file1 [file2 ... fileN] - изменение группы собственников файла
group - groupname or identificator

права доступа для файлов:
-r - read
-w - write
-x - execute (право на использование)

для директория:
-r - имена файлов
-x - просмотр доп информации о файлах (доступ на переход в эту директорию)
-w - изменение содержимого директории (как изменение внутри самих фалов, так и их удаление/добавление)

ls -l [имя_директория] - просмотр подробной информации о директории

drwxr-x---  2 test   test     4096 сен  9 20:11 test
            |
            для директория кол-во поддиректорий(для файла кол-во жёстких ссылок)
d - директория
- - регулярный файл
r,w,x,- - права доступа
первые 3 буквы после d - для хозяина
вторые 3 буквы после d - для группы
третьи 3 буквы после d - для остальныз пользователей

test(первый) - имя владельца
test(второй) - имя группы
4096 - размер файла в байтах
сен  9 20:11 - время последней модификации

chmod(change mod) [who]{+|-|=}[perm] file1 [file2 ... fileN] - изменение прав доступа к файлам
who - для какой категории:a(all), u(хозяин), g(group), o(other)
perm - права доступа (r,w,x)
+ - добавление
- - отмена
= - отмена всех установленных и установка новых
Пример: chmod o+r test.txt

ОС использует маску для создания директорий и файлов
4 - r, 2 - w, 1 - x (для директории 2 - x)
0400 - право чтения для пользователя, создавшего файл
0020 - право записи для группы пользователей, создавшего файл
0001 - право для всех остальных пользователей

для каталога - (0777) все права доступа открыты
для регулярного файла - (0666) все права доступа открыты

chmod права_файла - установка прав в числовом выде

umask(User file creation mode Mask) [mask] изменение значения маски (в восьмеричной системе)
устанавливаемые права доступа = ~маска & (режим полного доступа)
chmod учитывает значение маски

пусть маска - 0174
установленные права - 0602

Библиотека libc.
Ядро - основная постоянно функционирующая часть ОС, обеспечивающая приложениям координированный доступ к ресурсам компьютера.
Программы могут общаться с ядром посредством системных вызовов.
Системные вызовы - прямы точки входа программ в ядро.
libc - стандартная библиотека UNIX, обеспечивающая C-интерфейс к каждому системному вызову.
Каждому системному вызову соответствует системная функция, хранящаяся в библиотеке libc.

Системные вызовы возвращают челое значение:
-1 (оповещение о возникновении ошибок)
>= 0 (при нормальном завершении)
Системные вызовы, возвращающие указатели, обычно для идентификации ошибочной ситуации пользуются значением NULL.

void perror(char* str) (stdio.h) - функция вывода символьной инфы об ошибке на экран терминала.
errno (errno.h) - глабальная переменная хранящая код ошибки.

#include <sys/types.h>
#include <unistd.h>
uid_t getuid() - системный вызов, который возвращает идентификатор пользователя, запустившего программу на исполнение.
|
тип возвращаемого значения
gid_t getgid() - возвращает идентификатор группы пользователя.
uid_t и gid_t - целочисленные типы в Си.

Компилятор - программа, которая переводит текст программы в набор машинных кодов.
gcc programm.c (по умолчанию создаёт a.out)
gcc program.c -o programm.o
./имя_исполняемого_файла

Отладка - этап разработки программы, на котором обнаруживают, локализуют и устраняют ошибки.

Опция - -O0(отмена оптимизации кода), -O3(наивысший уровенб оптимизации), -g -включение отладочной информации
gcc -g -O0 programm.c -o programm.o

команды gdb:
l или list - просмотр исходного кода (можно указывать номер строки, начало и конец просмотра, конкретную функцию)
r - запуск программы с параметрами
b - в начало функции поcтавится breakpoint
сl - удаление breakpoint
info break - просмотр расставленных breakpointов
s [кол-во строк] - выполнение следующих строк с заходом внутрь функций
n [кол-во строк] - выполнение следующих строк без захода внутрь
с - выполнение до точки остановки
ctr+c или ctrl+shift+c - остановка gdb
i lo - инфа о текущих локальных преременных
bt - обратная трассировка(послед-ть вложенных ф-ий)

valgrind - программа для отладки использования памяти
valgrind --tool=memchek --leak-chek=yes ./programm.o

#команда - команда сохраняется но не выполняется

strace - вывод записей о каждом сис вызове в программе
ltrace - вывод записей о каждой функции из libc, вызываемых в программе
