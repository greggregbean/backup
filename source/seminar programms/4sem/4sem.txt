Библиотеки:
<fcntl.h>
<unistd.h>
<sys/types.h>

Таблица файловых дескрипторов - массив, который позволяет нашему процессу взаимодействовать с другими процессами
Файловый дескриптор - для текущего процесса однозначно определяет канал ввода-вывода

#include <fcntl.h>
int open (char* path, int flags);
int open (char* path, int flags, mode_t mode); - открывает файл
Возвращает: файловый дескриптор открытого файла или -1 в случае ошибки
flags - что с файлом можно делать
O_RDONLY
O_WRONLY
O_RDWR

O_CREAT -создание
O_EXCL - ошибка в случае существования файла с именем
O_APPEND - дописывание в файл инф-ы, указатель текущий позиции устанавливается в самый конец при открытии и перед выполнением каждой операции

O_NDELAY - запрещает перевод процесса в состояние ожидания
O_TRUNC - стирает файл, оставляя некоторые параметры

mode - установка прав доступа (обязателен в случае O_CREAT)

size_t read(int fd, void* addr, size_t nbytes);
size_t write(int fd, void* addr, size_t nbytes);
addr - адрес области памяти, начиная с которого будет размещаться принятая инф-я или браться инф-я для передачи
nbytes - кол-во байт, которое прочитали или записали
return (кол-во прочитанных или записанных байт);

PIPE, СИСТЕМНЫЙ ВЫЗОВ PIPE()
pipe - наиболее простой способ для передачи информации с помощью потоковой модели между различными процессами или внутри одного процесса.
(труба ограниченной ёмкости, расположенная внутри адресного пространства ОС)
#include <unistd.h>
int pipe(int* fd)
fd - указатель на массив из 2х целых значений
fd[0] - только чтение
fd[1] - только запись

Таблица открытых файлов:
-Наследуется процессом-ребёнком при порождении нового процесса системным вызовом fork()
-Входит в состав неизменяемой части системного контекста процесса при системном вызове exec()

FIFO (First Input First Output) - именнованный pipe.
int mknod(char* path, mode_t node, int dev);
dev всегда используем 0;
int mkfifo(char* path, mode_t mode);

